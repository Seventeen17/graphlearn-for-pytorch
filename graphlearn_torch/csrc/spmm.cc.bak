/* Copyright 2023 Alibaba Group Holding Limited. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include <vector>
#include "graphlearn_torch/include/spmm.h"

// #include "graphlearn_torch/csrc/cuda/gespmm.cuh"

namespace graphlearn_torch {

torch::Tensor SpMM(const c10::intrusive_ptr<SparseMatrix>& sparse_mat,
                   torch::Tensor dense_mat) {

  // Only implement forward path now.
  // Maybe forward and backward should be in python to use pytorch rpc
  std::vector<int64_t> shape = {sparse_mat->shape()[0], dense_mat.size(1)};
  auto indptr = sparse_mat->indptr();
  auto indices = sparse_mat->indices();
  return 
  // static auto op = c10::Dispatcher::singleton()
  //                      .findSchemaOrThrow("graphlearn_torch::GeSpMM", "")
  //                      .typed<decltype(GeSpMM)>();
  // return op.call(indptr, indices, dense_mat, shape);
}

} // namespace graphlearn_torch
